name: BrowserStack WDIO Tests

on:
  # Label trigger - runs when a specific label is added to a PR
  pull_request:
    types: [labeled]
    branches:
      - main
      - develop
  
  # Commented out commit trigger - uncomment to enable
  # push:
  #   branches:
  #     - main
  #     - develop

env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}

jobs:
  # android-tests:
  #   name: Android Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-android-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run Android Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_ANDROID_DEVICE || 'Samsung Galaxy S23 Ultra' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_ANDROID_OS_VERSION || '13.0' }}
  #         BROWSERSTACK_TAG_EXPRESSION: ${{ vars.BROWSERSTACK_ANDROID_TAGS || '@smoke and @androidApp' }}
  #       run: |
  #         yarn test:wdio:android:browserstack

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: android-test-results
  #         path: wdio/reports/
  #         retention-days: 30

  # ios-tests:
  #   name: iOS Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-ios-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run iOS Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_IOS_DEVICE || 'iPhone 15 Pro' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_IOS_OS_VERSION || '17.3' }}
  #         BROWSERSTACK_TAG_EXPRESSION: ${{ vars.BROWSERSTACK_IOS_TAGS || '@smoke and @iosApp' }}
  #         BROWSERSTACK_IOS_APP_URL: ${{ secrets.BROWSERSTACK_IOS_APP_URL }}
  #       run: |
  #         yarn test:wdio:ios:browserstack

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: ios-test-results
  #         path: wdio/reports/
  #         retention-days: 30

  # android-upgrade-tests:
  #   name: Android Upgrade Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-android-upgrade-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run Android Upgrade Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_ANDROID_DEVICE || 'Google Pixel 6' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_ANDROID_OS_VERSION || '12.0' }}
  #         BROWSERSTACK_ANDROID_APP_URL: ${{ secrets.BROWSERSTACK_ANDROID_APP_URL }}
  #       run: |
  #         yarn test:wdio:android:browserstack --upgrade

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: android-upgrade-test-results
  #         path: wdio/reports/
  #         retention-days: 30

  # ios-upgrade-tests:
  #   name: iOS Upgrade Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-ios-upgrade-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run iOS Upgrade Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_IOS_DEVICE || 'iPhone 15 Pro' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_IOS_OS_VERSION || '17.3' }}
  #         BROWSERSTACK_IOS_APP_URL: ${{ secrets.BROWSERSTACK_IOS_APP_URL }}
  #         PRODUCTION_APP_URL: ${{ secrets.PRODUCTION_APP_URL }}
  #       run: |
  #         yarn test:wdio:ios:browserstack --upgrade

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: ios-upgrade-test-results
  #         path: wdio/reports/
  #         retention-days: 30

  android-performance-tests:
    name: Android Performance Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'run-android-performance-tests')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@master
        with:
          username: ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.run_number }}
          project-name: ${{ github.repository }}

      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@master
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local

      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"

      - name: Run Android Performance Tests
        env:
          BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_ANDROID_DEVICE || 'Samsung Galaxy S23 Ultra' }}
          BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_ANDROID_OS_VERSION || '13.0' }}
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          yarn test:wdio:android:browserstack --performance

      - name: Generate AppProfiling Comment
        id: profiling-comment
        if: always()
        run: |
          # Check if profiling data exists
          if [ -d "wdio/reports" ]; then
            echo "Checking for profiling data in wdio/reports..."
            
            # Use our enhanced script to handle multiple files
            if node -e "const { formatMultipleProfilingFiles } = require('./wdio/utils/formatProfilingComment.js'); console.log(formatMultipleProfilingFiles());" 2>/dev/null; then
              node -e "const { formatMultipleProfilingFiles } = require('./wdio/utils/formatProfilingComment.js'); console.log(formatMultipleProfilingFiles());" > comment.txt
            else
              # Fallback to finding latest file
              LATEST_PROFILING_FILE=$(find wdio/reports -name "profiling-data-*.json" -type f -printf '%T@ %p\n' 2>/dev/null | sort -n | tail -1 | cut -f2- -d" ")
              
              if [ -n "$LATEST_PROFILING_FILE" ] && [ -f "$LATEST_PROFILING_FILE" ]; then
                echo "Found profiling file: $LATEST_PROFILING_FILE"
                node wdio/utils/formatProfilingComment.js "$LATEST_PROFILING_FILE" > comment.txt
              else
                echo "No profiling data found"
                echo "## ❌ No AppProfiling Data Available" > comment.txt
                echo "" >> comment.txt
                echo "No profiling data was collected during this test run." >> comment.txt
              fi
            fi
          else
            echo "Reports directory not found"
            echo "## ❌ No AppProfiling Data Available" > comment.txt
            echo "" >> comment.txt
            echo "Reports directory not found. Tests may not have completed successfully." >> comment.txt
          fi
          
          # Read the comment and set it as output
          COMMENT=$(cat comment.txt)
          echo "comment<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `${{ steps.profiling-comment.outputs.comment }}`;
            
            // Check if there's already a comment from this workflow
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('AppProfiling Metrics')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
              console.log('Updated existing AppProfiling comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
              console.log('Created new AppProfiling comment');
            }

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-performance-test-results
          path: wdio/reports/
          retention-days: 30

  # ios-performance-tests:
  #   name: iOS Performance Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-ios-performance-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run iOS Performance Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_IOS_DEVICE || 'iPhone 15 Pro' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_IOS_OS_VERSION || '17.3' }}
  #         BROWSERSTACK_IOS_APP_URL: ${{ secrets.BROWSERSTACK_IOS_APP_URL }}
  #       run: |
  #         yarn test:wdio:ios:browserstack --performance

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: ios-performance-test-results
  #         path: wdio/reports/
  #         retention-days: 30 