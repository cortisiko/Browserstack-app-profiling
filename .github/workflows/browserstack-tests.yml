name: BrowserStack WDIO Tests

on:
  # Label trigger - runs when a specific label is added to a PR
  pull_request:
    types: [labeled]
    branches:
      - main
      - develop
  
  # Commented out commit trigger - uncomment to enable
  # push:
  #   branches:
  #     - main
  #     - develop

# Add permissions for commenting on PRs
permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
  BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
  MM_TEST_ACCOUNT_SRP: ${{ secrets.MM_TEST_ACCOUNT_SRP }}

jobs:
  # android-tests:
  #   name: Android Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-android-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run Android Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_ANDROID_DEVICE || 'Samsung Galaxy S23 Ultra' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_ANDROID_OS_VERSION || '13.0' }}
  #         BROWSERSTACK_TAG_EXPRESSION: ${{ vars.BROWSERSTACK_ANDROID_TAGS || '@smoke and @androidApp' }}
  #       run: |
  #         yarn test:wdio:android:browserstack

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: android-test-results
  #         path: wdio/reports/
  #         retention-days: 30

  # ios-tests:
  #   name: iOS Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-ios-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run iOS Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_IOS_DEVICE || 'iPhone 15 Pro' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_IOS_OS_VERSION || '17.3' }}
  #         BROWSERSTACK_TAG_EXPRESSION: ${{ vars.BROWSERSTACK_IOS_TAGS || '@smoke and @iosApp' }}
  #         BROWSERSTACK_IOS_APP_URL: ${{ secrets.BROWSERSTACK_IOS_APP_URL }}
  #       run: |
  #         yarn test:wdio:ios:browserstack

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: ios-test-results
  #         path: wdio/reports/
  #         retention-days: 30

  # android-upgrade-tests:
  #   name: Android Upgrade Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-android-upgrade-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run Android Upgrade Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_ANDROID_DEVICE || 'Google Pixel 6' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_ANDROID_OS_VERSION || '12.0' }}
  #         BROWSERSTACK_ANDROID_APP_URL: ${{ secrets.BROWSERSTACK_ANDROID_APP_URL }}
  #       run: |
  #         yarn test:wdio:android:browserstack --upgrade

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: android-upgrade-test-results
  #         path: wdio/reports/
  #         retention-days: 30

  # ios-upgrade-tests:
  #   name: iOS Upgrade Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-ios-upgrade-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run iOS Upgrade Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_IOS_DEVICE || 'iPhone 15 Pro' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_IOS_OS_VERSION || '17.3' }}
  #         BROWSERSTACK_IOS_APP_URL: ${{ secrets.BROWSERSTACK_IOS_APP_URL }}
  #         PRODUCTION_APP_URL: ${{ secrets.PRODUCTION_APP_URL }}
  #       run: |
  #         yarn test:wdio:ios:browserstack --upgrade

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: ios-upgrade-test-results
  #         path: wdio/reports/
  #         retention-days: 30

  android-performance-tests:
    name: Android Performance Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'run-android-performance-tests')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.1'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: BrowserStack Env Setup
        uses: browserstack/github-actions/setup-env@master
        with:
          username: ${{ secrets.BROWSERSTACK_USERNAME }}
          access-key: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
          build-name: ${{ github.repository }}-${{ github.run_number }}
          project-name: ${{ github.repository }}

      - name: Setup BrowserStack Local
        uses: browserstack/github-actions/setup-local@master
        with:
          local-testing: start
          local-identifier: ${{ github.run_id }}
          local-args: --force-local

      - name: Wait for BrowserStack Local
        run: |
          echo "Waiting for BrowserStack Local to be ready..."
          sleep 30
          echo "BrowserStack Local should be ready now"

      - name: Run Android Performance Tests
        env:
          BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_ANDROID_DEVICE || 'Samsung Galaxy S23 Ultra' }}
          BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_ANDROID_OS_VERSION || '13.0' }}
          BROWSERSTACK_LOCAL: true
          BROWSERSTACK_LOCAL_IDENTIFIER: ${{ github.run_id }}
        run: |
          yarn test:wdio:android:browserstack --performance

      - name: Generate Individual AppProfiling Comments
        id: profiling-comments
        if: always()
        run: |
          # Check if profiling data exists
          if [ -d "wdio/reports" ]; then
            echo "Checking for profiling data in wdio/reports..."
            
            # Generate individual comments for each session
            if node -e "const { formatIndividualProfilingComments } = require('./wdio/utils/formatProfilingComment.js'); const comments = formatIndividualProfilingComments(); console.log(JSON.stringify(comments));" 2>/dev/null; then
              node -e "const { formatIndividualProfilingComments } = require('./wdio/utils/formatProfilingComment.js'); const comments = formatIndividualProfilingComments(); console.log(JSON.stringify(comments));" > comments.json
              echo "Generated individual comments for parallel sessions"
            else
              echo "Error generating individual comments, creating fallback"
              echo '[{"sessionId":"unknown","device":"unknown","comment":"## ❌ Error Generating AppProfiling Comments\\n\\nCould not generate individual comments for parallel sessions."}]' > comments.json
            fi
          else
            echo "Reports directory not found"
            echo '[{"sessionId":"unknown","device":"unknown","comment":"## ❌ No AppProfiling Data Available\\n\\nReports directory not found. Tests may not have completed successfully."}]' > comments.json
          fi
          
          # Count the number of comments
          COMMENT_COUNT=$(node -e "const comments = JSON.parse(require('fs').readFileSync('comments.json', 'utf8')); console.log(comments.length);")
          echo "comment_count=$COMMENT_COUNT" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // Read the individual comments from the file
            const fs = require('fs');
            let comments;
            
            try {
              comments = JSON.parse(fs.readFileSync('comments.json', 'utf8'));
            } catch (error) {
              console.error('Error reading comments file:', error);
              comments = [{
                sessionId: 'unknown',
                device: 'unknown',
                comment: '## ❌ Error Reading AppProfiling Data\n\nCould not read profiling data from file.'
              }];
            }
            
            console.log(`Processing ${comments.length} individual profiling comments`);
            
            // Get existing comments to check for duplicates
            const { data: existingComments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Process each individual comment
            for (const profilingComment of comments) {
              const { sessionId, device, comment } = profilingComment;
              
              // Create a unique identifier for this session's comment
              const commentIdentifier = `AppProfiling-${sessionId}-${device}`;
              
              // Check if there's already a comment for this specific session
              const existingComment = existingComments.find(existing => 
                existing.user.login === 'github-actions[bot]' && 
                existing.body.includes(`Session ID: \`${sessionId}\``)
              );
              
              if (existingComment) {
                // Update existing comment for this session
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: comment
                });
                console.log(`Updated existing AppProfiling comment for session ${sessionId} (${device})`);
              } else {
                // Create new comment for this session
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: comment
                });
                console.log(`Created new AppProfiling comment for session ${sessionId} (${device})`);
              }
            }
            
            console.log(`Successfully processed ${comments.length} profiling comments`);

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-performance-test-results
          path: wdio/reports/
          retention-days: 30

  # ios-performance-tests:
  #   name: iOS Performance Tests
  #   runs-on: ubuntu-latest
  #   if: contains(github.event.pull_request.labels.*.name, 'run-ios-performance-tests')
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.18.1'
  #         cache: 'yarn'

  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Setup BrowserStack Local
  #       uses: browserstack/github-actions/setup-local@master

  #     - name: Run iOS Performance Tests
  #       env:
  #         BROWSERSTACK_DEVICE: ${{ vars.BROWSERSTACK_IOS_DEVICE || 'iPhone 15 Pro' }}
  #         BROWSERSTACK_OS_VERSION: ${{ vars.BROWSERSTACK_IOS_OS_VERSION || '17.3' }}
  #         BROWSERSTACK_IOS_APP_URL: ${{ secrets.BROWSERSTACK_IOS_APP_URL }}
  #       run: |
  #         yarn test:wdio:ios:browserstack --performance

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: ios-performance-test-results
  #         path: wdio/reports/
  #         retention-days: 30 